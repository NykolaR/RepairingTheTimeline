[gd_scene load_steps=14 format=2]

[ext_resource path="res://Scenes/Management/Menus/MainMenu.tscn" type="PackedScene" id=1]
[ext_resource path="res://Assets/Audio/SFX/gamestart.wav" type="AudioStream" id=2]
[ext_resource path="res://Scenes/Management/Booty.gd" type="Script" id=3]
[ext_resource path="res://Assets/Audio/Music/mainsong_session_loop.ogg" type="AudioStream" id=4]

[sub_resource type="Animation" id=1]
resource_name = "Boot"
length = 1.5
tracks/0/type = "value"
tracks/0/path = NodePath("AudioStreamPlayer:volume_db")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ -80.0, 0.0 ]
}

[sub_resource type="Animation" id=2]
resource_name = "load"
tracks/0/type = "value"
tracks/0/path = NodePath("CanvasLayer/ColorRect:self_modulate:a")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.4, 0.6, 1 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ 0.0, 1.0, 1.0, 0.0 ]
}
tracks/1/type = "method"
tracks/1/path = NodePath(".")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0.5 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [ "progress" ],
"method": "emit_signal"
} ]
}

[sub_resource type="DynamicFontData" id=3]
font_path = "res://Assets/Fonts/Munro/munro.ttf"

[sub_resource type="DynamicFont" id=4]
size = 64
font_data = SubResource( 3 )

[sub_resource type="Animation" id=5]
resource_name = "credits"
length = 15.0
tracks/0/type = "value"
tracks/0/path = NodePath("CreditsLabel:rect_position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 15 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( 0, 1100 ), Vector2( 0, -1100 ) ]
}

[sub_resource type="Shader" id=6]
code = "shader_type canvas_item;
render_mode unshaded;

uniform sampler2D displace : hint_albedo;
uniform float dispAmt : hint_range(0, 0.1);
uniform float dispScale : hint_range(0.1, 2.0);
uniform float abberationAmt : hint_range(0, 0.1);
uniform float timeLine : hint_range(0.0, 10.0);

uniform float scanSpeed : hint_range(0.0, 100.0);
uniform float scanOffset : hint_range(0.0, 100.0);

uniform float screenCurvature : hint_range(0.0, 10.0);
uniform float curvatureDistance : 1.5;

vec2 distort(vec2 p) {

	float angle = p.y / p.x;
	float theta = atan(p.y, p.x);
	float radius = length(p);
	radius = pow(radius, screenCurvature);
	
	p.x = radius * cos(theta);
	p.y = radius * sin(theta);
	
	return 0.5 * (p + vec2(1.0,1.0));
}


void fragment() {
	
	// Remaping from 0:1 to -1:1
	vec2 p = (2.0 * SCREEN_UV) - 1.0;
	float d = length(p);
	if(d < curvatureDistance){
		p = distort(p);
	}else{
		p = SCREEN_UV;
	}
	
	// Displacement
	vec2 dispUv = p + vec2(0, TIME * 0.1);
	dispUv *= dispScale;
	vec2 disp = texture(displace, dispUv).xy;
	vec2 noiseUV = p + disp * dispAmt;
	
	// Noise Texture Sample
	float noise = texture(SCREEN_TEXTURE, noiseUV).r;
	
	// Horizontal Scan Lines
	float h = p.y * scanOffset - TIME * scanSpeed;
	h = clamp(1.0 - (abs(sin(h)) * 3.0), 0.0, 1.0);
	
	float clampedHLine = clamp(h * noise, 0.15, 1.0);
	
	float hLine = clampedHLine * noise;
	hLine *= 0.2;
	
	// Center \"ball\" thing
	vec2 cUv = p * 2.0 - 1.0;
	float tLine = pow(timeLine,2)*0.2;
	float modTLine = clamp(tLine / 4.0, 1.0, 8.0);
	modTLine = pow(modTLine, 2.5);
	cUv *= vec2(modTLine, tLine);
	
	float cBall =  2.0 * ((1.0 - length(cUv)) - 0.5);
	float cLine = pow(1.0 - length(vec2(cUv.g, 0.0)), 12.0);
	
	float center = 10.0 * ((cBall + cLine) - 0.1);
	
	float t = timeLine / 10.0;
	float final = (1.0-t)*hLine+t*center;
	
	// Abberation
	COLOR.r = texture(SCREEN_TEXTURE, noiseUV - abberationAmt * h).r;
	COLOR.g = texture(SCREEN_TEXTURE, noiseUV).g;
	COLOR.b = texture(SCREEN_TEXTURE, noiseUV + abberationAmt * h).b;
	COLOR.a = texture(SCREEN_TEXTURE, noiseUV).a;
	
	COLOR.rgb += vec3(final);
	
	//COLOR = texture(SCREEN_TEXTURE, p);
}"

[sub_resource type="OpenSimplexNoise" id=7]
seed = 2947
period = 1.0

[sub_resource type="NoiseTexture" id=8]
width = 1920
height = 1080
noise = SubResource( 7 )

[sub_resource type="ShaderMaterial" id=9]
shader = SubResource( 6 )
shader_param/dispAmt = 0.002
shader_param/dispScale = 0.3
shader_param/abberationAmt = 0.002
shader_param/timeLine = 0.0
shader_param/scanSpeed = 1.276
shader_param/scanOffset = 14.0
shader_param/screenCurvature = 10.0
shader_param/curvatureDistance = 0.0
shader_param/displace = SubResource( 8 )

[node name="Booty" type="Node" groups=[
"booty",
]]
script = ExtResource( 3 )

[node name="MainMenu" parent="." instance=ExtResource( 1 )]

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
autoplay = "Boot"
anims/Boot = SubResource( 1 )
anims/load = SubResource( 2 )

[node name="CanvasLayer" type="CanvasLayer" parent="."]
layer = 3

[node name="ColorRect" type="ColorRect" parent="CanvasLayer"]
self_modulate = Color( 1, 1, 1, 0 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
color = Color( 0.0196078, 0.0196078, 0.0196078, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="LevelHolder" type="Node" parent="."]

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 4 )
volume_db = -80.0
autoplay = true
bus = "Music"

[node name="AudioStreamPlayer2" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 2 )
volume_db = -16.0

[node name="CreditsLabel" type="Label" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
margin_top = 1100.0
margin_bottom = 1100.0
custom_fonts/font = SubResource( 4 )
text = "Credits


Nyk Reed

Adam Tilson

Quinn Bast

Wilson Nie

CJACK"
align = 1
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Credits" type="AnimationPlayer" parent="."]
anims/credits = SubResource( 5 )

[node name="CRTDistortion" type="Control" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect" type="ColorRect" parent="CRTDistortion"]
material = SubResource( 9 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
[connection signal="play_game" from="MainMenu" to="." method="_play_game"]
